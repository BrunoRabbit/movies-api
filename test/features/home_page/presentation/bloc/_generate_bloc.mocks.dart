// Mocks generated by Mockito 5.3.2 from annotations
// in movies_api/test/features/home_page/presentation/bloc/_generate_bloc.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:bloc/bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_api/features/home_page/domain/usecases/get_configuration_api.dart'
    as _i2;
import 'package:movies_api/features/home_page/domain/usecases/get_popular_movies.dart'
    as _i4;
import 'package:movies_api/features/home_page/domain/usecases/get_trending_api.dart'
    as _i6;
import 'package:movies_api/features/home_page/presentation/bloc/configurate_api_bloc/configurate_api_bloc.dart'
    as _i3;
import 'package:movies_api/features/home_page/presentation/bloc/popular_api_bloc/popular_api_bloc.dart'
    as _i5;
import 'package:movies_api/features/home_page/presentation/bloc/trending_api_bloc/trending_api_bloc.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetConfigurationApi_0 extends _i1.SmartFake
    implements _i2.GetConfigurationApi {
  _FakeGetConfigurationApi_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfigurateApiState_1 extends _i1.SmartFake
    implements _i3.ConfigurateApiState {
  _FakeConfigurateApiState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetPopularMovies_2 extends _i1.SmartFake
    implements _i4.GetPopularMovies {
  _FakeGetPopularMovies_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePopularApiState_3 extends _i1.SmartFake
    implements _i5.PopularApiState {
  _FakePopularApiState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTrendingApi_4 extends _i1.SmartFake
    implements _i6.GetTrendingApi {
  _FakeGetTrendingApi_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTrendingApiState_5 extends _i1.SmartFake
    implements _i7.TrendingApiState {
  _FakeTrendingApiState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConfigurateApiBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigurateApiBloc extends _i1.Mock
    implements _i3.ConfigurateApiBloc {
  @override
  _i2.GetConfigurationApi get getConfigurationApi => (super.noSuchMethod(
        Invocation.getter(#getConfigurationApi),
        returnValue: _FakeGetConfigurationApi_0(
          this,
          Invocation.getter(#getConfigurationApi),
        ),
        returnValueForMissingStub: _FakeGetConfigurationApi_0(
          this,
          Invocation.getter(#getConfigurationApi),
        ),
      ) as _i2.GetConfigurationApi);
  @override
  _i3.ConfigurateApiState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeConfigurateApiState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeConfigurateApiState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.ConfigurateApiState);
  @override
  _i8.Stream<_i3.ConfigurateApiState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i3.ConfigurateApiState>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.ConfigurateApiState>.empty(),
      ) as _i8.Stream<_i3.ConfigurateApiState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i3.ConfigurateApiEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i3.ConfigurateApiEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.ConfigurateApiState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i3.ConfigurateApiEvent>(
    _i9.EventHandler<E, _i3.ConfigurateApiState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i9.Transition<_i3.ConfigurateApiEvent, _i3.ConfigurateApiState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void onChange(_i9.Change<_i3.ConfigurateApiState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PopularApiBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularApiBloc extends _i1.Mock implements _i5.PopularApiBloc {
  @override
  _i4.GetPopularMovies get getPopularMovies => (super.noSuchMethod(
        Invocation.getter(#getPopularMovies),
        returnValue: _FakeGetPopularMovies_2(
          this,
          Invocation.getter(#getPopularMovies),
        ),
        returnValueForMissingStub: _FakeGetPopularMovies_2(
          this,
          Invocation.getter(#getPopularMovies),
        ),
      ) as _i4.GetPopularMovies);
  @override
  _i5.PopularApiState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePopularApiState_3(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakePopularApiState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.PopularApiState);
  @override
  _i8.Stream<_i5.PopularApiState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i5.PopularApiState>.empty(),
        returnValueForMissingStub: _i8.Stream<_i5.PopularApiState>.empty(),
      ) as _i8.Stream<_i5.PopularApiState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i5.PopularApiEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i5.PopularApiEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i5.PopularApiState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i5.PopularApiEvent>(
    _i9.EventHandler<E, _i5.PopularApiState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i9.Transition<_i5.PopularApiEvent, _i5.PopularApiState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void onChange(_i9.Change<_i5.PopularApiState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TrendingApiBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrendingApiBloc extends _i1.Mock implements _i7.TrendingApiBloc {
  @override
  _i6.GetTrendingApi get getTrendingApi => (super.noSuchMethod(
        Invocation.getter(#getTrendingApi),
        returnValue: _FakeGetTrendingApi_4(
          this,
          Invocation.getter(#getTrendingApi),
        ),
        returnValueForMissingStub: _FakeGetTrendingApi_4(
          this,
          Invocation.getter(#getTrendingApi),
        ),
      ) as _i6.GetTrendingApi);
  @override
  _i7.TrendingApiState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTrendingApiState_5(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeTrendingApiState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.TrendingApiState);
  @override
  _i8.Stream<_i7.TrendingApiState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i7.TrendingApiState>.empty(),
        returnValueForMissingStub: _i8.Stream<_i7.TrendingApiState>.empty(),
      ) as _i8.Stream<_i7.TrendingApiState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i7.TrendingApiEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i7.TrendingApiEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i7.TrendingApiState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i7.TrendingApiEvent>(
    _i9.EventHandler<E, _i7.TrendingApiState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i9.Transition<_i7.TrendingApiEvent, _i7.TrendingApiState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void onChange(_i9.Change<_i7.TrendingApiState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
